<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.qimu.mybatis.dao.PositionMapper" >
  <resultMap id="BaseResultMap" type="cn.qimu.mybatis.model.Position" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="position_type_id" property="positionTypeId" jdbcType="INTEGER" />
    <result column="position_name" property="positionName" jdbcType="VARCHAR" />
    <result column="require_number" property="requireNumber" jdbcType="INTEGER" />
    <result column="work_experience" property="workExperience" jdbcType="INTEGER" />
    <result column="education_backgroud" property="educationBackgroud" jdbcType="VARCHAR" />
    <result column="position_require" property="positionRequire" jdbcType="VARCHAR" />
    <result column="position_duty" property="positionDuty" jdbcType="VARCHAR" />
    <result column="is_delete" property="isDelete" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, position_type_id, position_name, require_number, work_experience, education_backgroud, 
    position_require, position_duty, is_delete
  </sql>
  <select id="countByCondition" resultType="int"  >
    select
    count(0)
    from `position`
    where
    id>0
    <if test="typeId != null">
      and position_type_id=#{typeId}
    </if>
    <if test="reqNumber !=null">
      AND require_number=#{reqNumber}
    </if>
    <if test="workExp !=null">
      AND work_experience=#{workExp}
    </if>
    <if test="eduBack !=null and eduBack !=''">
      AND education_backgroud=#{eduBack}
    </if>
    <if test="positionName !=null and positionName !=''">
      AND position_name like CONCAT('%',#{positionName},'%')
    </if>
    <if test="isDelete != null">
      AND is_delete=#{isDelete}
    </if>
  </select>
  <select id="selectPositionPage" resultMap="BaseResultMap"  >
    select
    <include refid="Base_Column_List" />
    from `position`
    where
    id>0
    <if test="typeId != null">
      and position_type_id=#{typeId}
    </if>
    <if test="reqNumber !=null">
      AND require_number=#{reqNumber}
    </if>
    <if test="workExp !=null">
      AND work_experience=#{workExp}
    </if>
    <if test="eduBack !=null and eduBack !=''">
      AND education_backgroud=#{eduBack}
    </if>
    <if test="positionName !=null and positionName !=''">
      AND position_name like CONCAT('%',#{positionName},'%')
    </if>
    <if test="isDelete != null">
      AND is_delete=#{isDelete}
    </if>
    LIMIT  #{startRow} , #{pageSize}
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.qimu.mybatis.model.PositionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from position
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from position
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectPositionNameByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    position_name
    from position
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectPositionNumByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    require_number
    from position
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectPositionWorkExpByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    work_experience
    from position
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectPositionRequireByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    position_require
    from position
    where id = #{id,jdbcType=INTEGER}
  </select><select id="selectPositionEduBackgroundByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    education_backgroud
    from position
    where id = #{id,jdbcType=INTEGER}
  </select><select id="selectPositionDutyByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    position_duty
    from position
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectSameTypePositionByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT
    p.id,position_name, require_number, work_experience, education_backgroud,
    position_require, position_duty
    FROM
      `position` p,position_type pt
    WHERE
      p.position_type_id=pt.id
    AND
      pt.id= #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from position
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.qimu.mybatis.model.PositionExample" >
    delete from position
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.qimu.mybatis.model.Position" >
    insert into position (id, position_type_id, position_name, 
      require_number, work_experience, education_backgroud, 
      position_require, position_duty, is_delete
      )
    values (#{id,jdbcType=INTEGER}, #{positionTypeId,jdbcType=INTEGER}, #{positionName,jdbcType=VARCHAR}, 
      #{requireNumber,jdbcType=INTEGER}, #{workExperience,jdbcType=INTEGER}, #{educationBackgroud,jdbcType=VARCHAR}, 
      #{positionRequire,jdbcType=VARCHAR}, #{positionDuty,jdbcType=VARCHAR}, #{isDelete,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.qimu.mybatis.model.Position" >
    insert into position
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="positionTypeId != null" >
        position_type_id,
      </if>
      <if test="positionName != null" >
        position_name,
      </if>
      <if test="requireNumber != null" >
        require_number,
      </if>
      <if test="workExperience != null" >
        work_experience,
      </if>
      <if test="educationBackgroud != null" >
        education_backgroud,
      </if>
      <if test="positionRequire != null" >
        position_require,
      </if>
      <if test="positionDuty != null" >
        position_duty,
      </if>
      <if test="isDelete != null" >
        is_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="positionTypeId != null" >
        #{positionTypeId,jdbcType=INTEGER},
      </if>
      <if test="positionName != null" >
        #{positionName,jdbcType=VARCHAR},
      </if>
      <if test="requireNumber != null" >
        #{requireNumber,jdbcType=INTEGER},
      </if>
      <if test="workExperience != null" >
        #{workExperience,jdbcType=INTEGER},
      </if>
      <if test="educationBackgroud != null" >
        #{educationBackgroud,jdbcType=VARCHAR},
      </if>
      <if test="positionRequire != null" >
        #{positionRequire,jdbcType=VARCHAR},
      </if>
      <if test="positionDuty != null" >
        #{positionDuty,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.qimu.mybatis.model.PositionExample" resultType="java.lang.Integer" >
    select count(*) from position
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update position
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.positionTypeId != null" >
        position_type_id = #{record.positionTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.positionName != null" >
        position_name = #{record.positionName,jdbcType=VARCHAR},
      </if>
      <if test="record.requireNumber != null" >
        require_number = #{record.requireNumber,jdbcType=INTEGER},
      </if>
      <if test="record.workExperience != null" >
        work_experience = #{record.workExperience,jdbcType=INTEGER},
      </if>
      <if test="record.educationBackgroud != null" >
        education_backgroud = #{record.educationBackgroud,jdbcType=VARCHAR},
      </if>
      <if test="record.positionRequire != null" >
        position_require = #{record.positionRequire,jdbcType=VARCHAR},
      </if>
      <if test="record.positionDuty != null" >
        position_duty = #{record.positionDuty,jdbcType=VARCHAR},
      </if>
      <if test="record.isDelete != null" >
        is_delete = #{record.isDelete,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update position
    set id = #{record.id,jdbcType=INTEGER},
      position_type_id = #{record.positionTypeId,jdbcType=INTEGER},
      position_name = #{record.positionName,jdbcType=VARCHAR},
      require_number = #{record.requireNumber,jdbcType=INTEGER},
      work_experience = #{record.workExperience,jdbcType=INTEGER},
      education_backgroud = #{record.educationBackgroud,jdbcType=VARCHAR},
      position_require = #{record.positionRequire,jdbcType=VARCHAR},
      position_duty = #{record.positionDuty,jdbcType=VARCHAR},
      is_delete = #{record.isDelete,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.qimu.mybatis.model.Position" >
    update position
    <set >
      <if test="positionTypeId != null" >
        position_type_id = #{positionTypeId,jdbcType=INTEGER},
      </if>
      <if test="positionName != null" >
        position_name = #{positionName,jdbcType=VARCHAR},
      </if>
      <if test="requireNumber != null" >
        require_number = #{requireNumber,jdbcType=INTEGER},
      </if>
      <if test="workExperience != null" >
        work_experience = #{workExperience,jdbcType=INTEGER},
      </if>
      <if test="educationBackgroud != null" >
        education_backgroud = #{educationBackgroud,jdbcType=VARCHAR},
      </if>
      <if test="positionRequire != null and positionRequire !='' " >
        position_require = #{positionRequire,jdbcType=VARCHAR},
      </if>
      <if test="positionDuty != null and positionDuty !='' " >
        position_duty = #{positionDuty,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null" >
        is_delete = #{isDelete,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.qimu.mybatis.model.Position" >
    update position
    set position_type_id = #{positionTypeId,jdbcType=INTEGER},
      position_name = #{positionName,jdbcType=VARCHAR},
      require_number = #{requireNumber,jdbcType=INTEGER},
      work_experience = #{workExperience,jdbcType=INTEGER},
      education_backgroud = #{educationBackgroud,jdbcType=VARCHAR},
      position_require = #{positionRequire,jdbcType=VARCHAR},
      position_duty = #{positionDuty,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>